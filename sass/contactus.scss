@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');

$Text-color: #fff ;
$BlueBG-color: #03a9f4;
$MyBlackColor: #111;
$text: 'Pacifico', cursive'Poppins', sans-serif;


* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Bebas Neue', cursive;

}



.showcase {
  width: 100%;
  min-height: 100vh;
  padding: 100px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: $MyBlackColor;
  transition: 0.5s;
  z-index: 2;
}


.showcase img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  opacity: 0.8;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.301);
  mix-blend-mode: overlay;
}

.text {
  position: absolute;
  z-index: 10;
 
}

.text h2 {
  font-size: 5em;
  font-weight: 800;
  color: $Text-color;
  line-height: 1em;
}

.text p  {
  font-size: 1.1em;
  color: $Text-color;
  margin: 20px 0;
  font-weight: 400;
  max-width: 700px;
}

.text a {
  display: inline-block;
  font-size: 1em;
  background: $Text-color;
  padding: 10px 30px;
  text-transform: uppercase;
  text-decoration: none;
  font-weight: 500;
  margin-top: 10px;
  color: $MyBlackColor;
  letter-spacing: 2px;
  transition: 0.2s;
}

.text a:hover {
  letter-spacing: 6px;
}


.animationtext {
  margin: 0 auto;
  overflow: hidden;
  white-space: nowrap;
  border-right: .17em solid $MyBlackColor;
  animation: typing 3.5s steps(30, end), blinking-cursor .5s step-end infinite;
}

@keyframes typing {
  from {
    width: 0
  }
  to {
    width: 100%
  }
}

@keyframes blinking-cursor {
  from,
  to {
    border-color: transparent;
  }
  50% {
    border-color: $Text-color;
  }
}




/*section form*/

.b-color {
  background-color: rgba(17, 17, 17, 0.079);
  color: $MyBlackColor;
}



/*section form*/

/*footer*/

.Copyright {
    text-align: center;
  }
  
  a {
    text-decoration: none;
  }
  
  
  .fa-brands {
    margin: 12px;
  }
  
  footer {
    font-family: $text;
    background-color: $Text-color
  }
  
  
  .fa-envelope {
    color: rgb(189, 189, 10);
  }
  
  .fa-facebook-messenger {
    color: $BlueBG-color;
  } 
  
  .fa-phone {
    color:red;
  }
  
  a {
    color: $MyBlackColor
  }
  
  /*footer*/



  @media (max-width: 991px)
{
  .showcase
  {
    padding: 40px;
  }
  .text h2
  {
    font-size: 3em;
  }
  .map {
    max-width:fit-content;
    height: auto;
  }
}



//media breakpoint//


$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 942px,
  xl: 1200px,
  xxl: 1400px
);


$breakpoint: map-get($breakpoints, sm); // Get the small breakpoint.

$breakpoint: map-get($breakpoints, md); // Get the medium breakpoint.

$breakpoint: map-get($breakpoints, lg); // Get the large breakpoint.

$breakpoint: map-get($breakpoints, xl); // Get the xlarge breakpoint.

$breakpoint: map-get($breakpoints, xxl); // Get the extra extra large breakpoint.


@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-below ($breakpoint){
  // If the breakpoint exists in the map.
@if map-has-key($breakpoints, $breakpoint) {

  // Get the breakpoint value.
  $breakpoint-value: map-get($breakpoints, $breakpoint);

  // Write the media query.
  @media (max-width: ($breakpoint-value - 1)) {
    @content;
  }

// If the breakpoint doesn't exist in the map.
} @else {

  // Log a warning.
  @warn 'Invalid breakpoint: #{$breakpoint}.';
}
}

// @include respond-below(sm) {

// }

/*
  Respond between
  Here we want to check that both the $lower and $upper keys exist in the $breakpoints map before writing the media query.
*/

@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@include respond-between(xs, lg) {
  .container {
    overflow: hidden;
    z-index: 10;
}
.container-fluid {
  overflow: hidden;
  z-index: 10;
}

}



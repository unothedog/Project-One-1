@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Alfa+Slab+One&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Anton&display=swap');



$Text-color: #fff ;
$BlueBG-color: #03a9f4;
$MyBlackColor: #111;
$text: 'Poppins', sans-serif;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Anton', sans-serif;
  
  
  
  
}


//section main-order//

.row {
  display: -ms-flexbox; /* IE10 */
  display: flex;
  -ms-flex-wrap: wrap; /* IE10 */
  flex-wrap: wrap;
  padding: 0 4px;
}


.column {
  -ms-flex: 25%; /* IE10 */
  flex: 25%;
  max-width: 25%;
  padding: 0 4px;
}

.column img {
  margin-top: 8px;
  vertical-align: middle;
  width: 100%;
  box-shadow: rgba(0, 0, 0, 0.503) 0px 54px 55px, rgba(0, 0, 0, 0.366) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
  border-radius: 50px;
}


.maintagline {
  text-align: center;
  margin: auto;
 
  color: $MyBlackColor;
  position: sticky;

 
}


.grow > a > p {
 
  color: $Text-color;
  font-size: 1rem;
  font-size: larger;
  
}

body {
  background-image: url("../image/bgwater3.jpg");
  position: absolute;
  background-repeat: no-repeat;
  background-size: cover;
  width: 100%;
  height: 100vh;
}

//animation//

 /* hover effects*/

 .grow img{
  cursor: pointer;
  transition: 1s ease;
  }
  
  .grow img:hover{
  -webkit-transform: scale(1.2);
  -ms-transform: scale(1.3);
  transform: scale(1.4);
  transition: 1s ease;
  
  }
/* hover effects*/
 

//animation//


//section main-order//





/*footer*/

.Copyright {
    text-align: center;
  }
  
  a {
    text-decoration: none;
  }
  
  
  .fa-brands {
    margin: 12px;
  }
  
  footer {
    font-family: 'Roboto Mono', monospace;
    background-color: $Text-color;
  }
  
  
  .fa-envelope {
    color: rgb(189, 189, 10);
  }
  
  .fa-facebook-messenger {
    color: $BlueBG-color;
  } 
  
  .fa-phone {
    color:red;
  }
  
  a {
    color: $MyBlackColor
  }
  
  /*footer*/





  //media breakpoint//

  
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 942px,
  xl: 1200px,
  xxl: 1400px
);


$breakpoint: map-get($breakpoints, sm); // Get the small breakpoint.

$breakpoint: map-get($breakpoints, md); // Get the medium breakpoint.

$breakpoint: map-get($breakpoints, lg); // Get the large breakpoint.

$breakpoint: map-get($breakpoints, xl); // Get the xlarge breakpoint.

$breakpoint: map-get($breakpoints, xxl); // Get the extra extra large breakpoint.


@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-below ($breakpoint){
  // If the breakpoint exists in the map.
@if map-has-key($breakpoints, $breakpoint) {

  // Get the breakpoint value.
  $breakpoint-value: map-get($breakpoints, $breakpoint);

  // Write the media query.
  @media (max-width: ($breakpoint-value - 1)) {
    @content;
  }

// If the breakpoint doesn't exist in the map.
} @else {

  // Log a warning.
  @warn 'Invalid breakpoint: #{$breakpoint}.';
}
}

// @include respond-below(sm) {

// }

/*
  Respond between
  Here we want to check that both the $lower and $upper keys exist in the $breakpoints map before writing the media query.
*/

@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@include respond-between(xs, lg) {
  .container{
    overflow: hidden;
    z-index: 10;
}
.container-fluid{
  overflow: hidden;
  z-index: 10;
  
}
}





/* Responsive layout - makes a two column-layout instead of four columns */
@media screen and (max-width: 800px) {
  .column {
    -ms-flex: 50%;
    flex: 50%;
    max-width: 50%;
  }
}

/* Responsive layout - makes the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .column {
    -ms-flex: 100%;
    flex: 100%;
    max-width: 100%;
  }
}

@import url('https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800,900&display=swap');

$Text-color: #fff ;
$BlueBG-color: #03a9f4;
$MyBlackColor: #111;
$text: 'Poppins', sans-serif;


.searchko  {
  position:absolute;
 
}







/*footer*/

.Copyright {
    text-align: center;
  }
  
  a {
    text-decoration: none;
  }
  
  
  .fa-brands {
    margin: 12px;
  }
  
  footer {
    font-family: $text;
    background-color: $Text-color;
  }
  
  
  .fa-envelope {
    color: rgb(189, 189, 10);
  }
  
  .fa-facebook-messenger {
    color: $BlueBG-color;
  } 
  
  .fa-phone {
    color:red;
  }
  
  a {
    color: $MyBlackColor
  }
  
  /*footer*/





  //media breakpoint//

  
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 942px,
  xl: 1200px,
  xxl: 1400px
);


$breakpoint: map-get($breakpoints, sm); // Get the small breakpoint.

$breakpoint: map-get($breakpoints, md); // Get the medium breakpoint.

$breakpoint: map-get($breakpoints, lg); // Get the large breakpoint.

$breakpoint: map-get($breakpoints, xl); // Get the xlarge breakpoint.

$breakpoint: map-get($breakpoints, xxl); // Get the extra extra large breakpoint.


@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-below ($breakpoint){
  // If the breakpoint exists in the map.
@if map-has-key($breakpoints, $breakpoint) {

  // Get the breakpoint value.
  $breakpoint-value: map-get($breakpoints, $breakpoint);

  // Write the media query.
  @media (max-width: ($breakpoint-value - 1)) {
    @content;
  }

// If the breakpoint doesn't exist in the map.
} @else {

  // Log a warning.
  @warn 'Invalid breakpoint: #{$breakpoint}.';
}
}

// @include respond-below(sm) {

// }

/*
  Respond between
  Here we want to check that both the $lower and $upper keys exist in the $breakpoints map before writing the media query.
*/

@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@include respond-between(xs, lg) {
  .container{
    overflow: hidden;
    z-index: 10;
}
}

